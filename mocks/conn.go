// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quexer/tok (interfaces: ConAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/conn.go -package=mocks . ConAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tok "github.com/quexer/tok"
	gomock "go.uber.org/mock/gomock"
)

// MockConAdapter is a mock of ConAdapter interface.
type MockConAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockConAdapterMockRecorder
	isgomock struct{}
}

// MockConAdapterMockRecorder is the mock recorder for MockConAdapter.
type MockConAdapterMockRecorder struct {
	mock *MockConAdapter
}

// NewMockConAdapter creates a new mock instance.
func NewMockConAdapter(ctrl *gomock.Controller) *MockConAdapter {
	mock := &MockConAdapter{ctrl: ctrl}
	mock.recorder = &MockConAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConAdapter) EXPECT() *MockConAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConAdapter)(nil).Close))
}

// Read mocks base method.
func (m *MockConAdapter) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConAdapterMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConAdapter)(nil).Read))
}

// ShareConn mocks base method.
func (m *MockConAdapter) ShareConn(adapter tok.ConAdapter) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareConn", adapter)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShareConn indicates an expected call of ShareConn.
func (mr *MockConAdapterMockRecorder) ShareConn(adapter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareConn", reflect.TypeOf((*MockConAdapter)(nil).ShareConn), adapter)
}

// Write mocks base method.
func (m *MockConAdapter) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockConAdapterMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConAdapter)(nil).Write), arg0)
}
