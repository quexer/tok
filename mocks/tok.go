// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quexer/tok (interfaces: Actor,BeforeReceiveHandler,BeforeSendHandler,AfterSendHandler,CloseHandler,PingGenerator)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tok.go -package=mocks . Actor,BeforeReceiveHandler,BeforeSendHandler,AfterSendHandler,CloseHandler,PingGenerator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tok "github.com/quexer/tok"
	gomock "go.uber.org/mock/gomock"
)

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
	isgomock struct{}
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// OnReceive mocks base method.
func (m *MockActor) OnReceive(dv *tok.Device, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReceive", dv, data)
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockActorMockRecorder) OnReceive(dv, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockActor)(nil).OnReceive), dv, data)
}

// MockBeforeReceiveHandler is a mock of BeforeReceiveHandler interface.
type MockBeforeReceiveHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeReceiveHandlerMockRecorder
	isgomock struct{}
}

// MockBeforeReceiveHandlerMockRecorder is the mock recorder for MockBeforeReceiveHandler.
type MockBeforeReceiveHandlerMockRecorder struct {
	mock *MockBeforeReceiveHandler
}

// NewMockBeforeReceiveHandler creates a new mock instance.
func NewMockBeforeReceiveHandler(ctrl *gomock.Controller) *MockBeforeReceiveHandler {
	mock := &MockBeforeReceiveHandler{ctrl: ctrl}
	mock.recorder = &MockBeforeReceiveHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeforeReceiveHandler) EXPECT() *MockBeforeReceiveHandlerMockRecorder {
	return m.recorder
}

// BeforeReceive mocks base method.
func (m *MockBeforeReceiveHandler) BeforeReceive(dv *tok.Device, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeReceive", dv, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeReceive indicates an expected call of BeforeReceive.
func (mr *MockBeforeReceiveHandlerMockRecorder) BeforeReceive(dv, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeReceive", reflect.TypeOf((*MockBeforeReceiveHandler)(nil).BeforeReceive), dv, data)
}

// MockBeforeSendHandler is a mock of BeforeSendHandler interface.
type MockBeforeSendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeSendHandlerMockRecorder
	isgomock struct{}
}

// MockBeforeSendHandlerMockRecorder is the mock recorder for MockBeforeSendHandler.
type MockBeforeSendHandlerMockRecorder struct {
	mock *MockBeforeSendHandler
}

// NewMockBeforeSendHandler creates a new mock instance.
func NewMockBeforeSendHandler(ctrl *gomock.Controller) *MockBeforeSendHandler {
	mock := &MockBeforeSendHandler{ctrl: ctrl}
	mock.recorder = &MockBeforeSendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeforeSendHandler) EXPECT() *MockBeforeSendHandlerMockRecorder {
	return m.recorder
}

// BeforeSend mocks base method.
func (m *MockBeforeSendHandler) BeforeSend(dv *tok.Device, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeSend", dv, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeSend indicates an expected call of BeforeSend.
func (mr *MockBeforeSendHandlerMockRecorder) BeforeSend(dv, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeSend", reflect.TypeOf((*MockBeforeSendHandler)(nil).BeforeSend), dv, data)
}

// MockAfterSendHandler is a mock of AfterSendHandler interface.
type MockAfterSendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAfterSendHandlerMockRecorder
	isgomock struct{}
}

// MockAfterSendHandlerMockRecorder is the mock recorder for MockAfterSendHandler.
type MockAfterSendHandlerMockRecorder struct {
	mock *MockAfterSendHandler
}

// NewMockAfterSendHandler creates a new mock instance.
func NewMockAfterSendHandler(ctrl *gomock.Controller) *MockAfterSendHandler {
	mock := &MockAfterSendHandler{ctrl: ctrl}
	mock.recorder = &MockAfterSendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAfterSendHandler) EXPECT() *MockAfterSendHandlerMockRecorder {
	return m.recorder
}

// AfterSend mocks base method.
func (m *MockAfterSendHandler) AfterSend(dv *tok.Device, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterSend", dv, data)
}

// AfterSend indicates an expected call of AfterSend.
func (mr *MockAfterSendHandlerMockRecorder) AfterSend(dv, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSend", reflect.TypeOf((*MockAfterSendHandler)(nil).AfterSend), dv, data)
}

// MockCloseHandler is a mock of CloseHandler interface.
type MockCloseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCloseHandlerMockRecorder
	isgomock struct{}
}

// MockCloseHandlerMockRecorder is the mock recorder for MockCloseHandler.
type MockCloseHandlerMockRecorder struct {
	mock *MockCloseHandler
}

// NewMockCloseHandler creates a new mock instance.
func NewMockCloseHandler(ctrl *gomock.Controller) *MockCloseHandler {
	mock := &MockCloseHandler{ctrl: ctrl}
	mock.recorder = &MockCloseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloseHandler) EXPECT() *MockCloseHandlerMockRecorder {
	return m.recorder
}

// OnClose mocks base method.
func (m *MockCloseHandler) OnClose(dv *tok.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", dv)
}

// OnClose indicates an expected call of OnClose.
func (mr *MockCloseHandlerMockRecorder) OnClose(dv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockCloseHandler)(nil).OnClose), dv)
}

// MockPingGenerator is a mock of PingGenerator interface.
type MockPingGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPingGeneratorMockRecorder
	isgomock struct{}
}

// MockPingGeneratorMockRecorder is the mock recorder for MockPingGenerator.
type MockPingGeneratorMockRecorder struct {
	mock *MockPingGenerator
}

// NewMockPingGenerator creates a new mock instance.
func NewMockPingGenerator(ctrl *gomock.Controller) *MockPingGenerator {
	mock := &MockPingGenerator{ctrl: ctrl}
	mock.recorder = &MockPingGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingGenerator) EXPECT() *MockPingGeneratorMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingGenerator) Ping() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingGeneratorMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingGenerator)(nil).Ping))
}
