// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quexer/tok (interfaces: Queue)
//
// Generated by this command:
//
//	mockgen -destination=mocks/q.go -package=mocks . Queue
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
	isgomock struct{}
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Deq mocks base method.
func (m *MockQueue) Deq(ctx context.Context, uid any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deq", ctx, uid)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deq indicates an expected call of Deq.
func (mr *MockQueueMockRecorder) Deq(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deq", reflect.TypeOf((*MockQueue)(nil).Deq), ctx, uid)
}

// Enq mocks base method.
func (m *MockQueue) Enq(ctx context.Context, uid any, data []byte, ttl ...uint32) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, uid, data}
	for _, a := range ttl {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enq", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enq indicates an expected call of Enq.
func (mr *MockQueueMockRecorder) Enq(ctx, uid, data any, ttl ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, uid, data}, ttl...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enq", reflect.TypeOf((*MockQueue)(nil).Enq), varargs...)
}

// Len mocks base method.
func (m *MockQueue) Len(ctx context.Context, uid any) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len", ctx, uid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockQueueMockRecorder) Len(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockQueue)(nil).Len), ctx, uid)
}
